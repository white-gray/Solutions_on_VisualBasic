'Здесь два макроса
'	ОбработкаФайловИзПапки - вносит определённые изменения в определённые *.xmlx файлы, находящиеся в текущей папке и вложенных папках
'	ПроверкаФайловИзПапки  - проверяет указанное в определённых *.xmlx файлах, находящихся в текущей папке и вложенных папках
'
'
'--------------------------------------------------------------------------------------------------------------------------------



Attribute VB_Name = "Module1"
Sub ОбработкаФайловИзПапки()
        
    Dim folder$, coll As Collection
 
' проверка есть ли такая папка
    folder$ = ThisWorkbook.Path & "\"
    If Dir(folder$, vbDirectory) = "" Then
        MsgBox "Не найдена папка «" & folder$ & "»", vbCritical, "Нет указанной папки"
        Exit Sub        ' выход, если папка не найдена
    End If
 
' при помощи Подпрограммы "FilenamesCollection" получаем список файлов XLS из папки и всех (в "глубину" до 999) подпапок там
    Set coll = FilenamesCollection(folder$, "*IPtabl*.xlsx", 999)       ' получаем список файлов XLS из папки
' проверяет собраны ли данные, и если нет, - сообщает о том, что нет таких файлов
    If coll.Count = 0 Then
        MsgBox "В папке «" & Split(folder$, "\")(UBound(Split(folder$, "\")) - 1) & "» нет ни одного подходящего файла!", _
               vbCritical, "Файлы для обработки не найдены"
        Exit Sub        ' выход, если нет файлов
    End If
 
'    Application.ScreenUpdating = False    ' отключаем обновление экрана

' создаём новую книгу
    Dim sh As Worksheet: Set sh = Workbooks.Add.Worksheets(1)
' формируем заголовки таблицы
    With sh.Range("a1").Resize(, 3)
        .Value = Array("№", "Имя файла", "Полный путь")
        .Font.Bold = True: .Interior.ColorIndex = 17
    End With
 
' выводим результаты на лист; и, если надо, - вносит изменения в файл путь к которому прописан на вносимой строке
    For I = 1 To coll.Count ' перебираем все элементы коллекции, содержащей пути к файлам
    Debug.Print I
    Debug.Print coll(I)
    Debug.Print Dir(coll(I))
    Debug.Print coll(I)
    Debug.Print "_____________________________________"
    Debug.Print "   "
    
    If Dir(coll(I)) = "GI-UVD-S0 IPtables.xlsx" Then
        GoTo Pass
    End If
    
'        sh.Range("a" & sh.Rows.Count).End(xlUp).Offset(1).Resize(, 3).Value = Array(I, Dir(coll(I)), coll(I))    ' выводим на лист очередную строку
         Workbooks.Open Filename:=coll(I)   ' открывает файл, прописанный в данной строке
         
    Debug.Print "_____________________________________"
    Debug.Print "считается   "
         
         Sheets("Таблица IP адресов").Activate  ' переходит на страницу "Таблица IP адресов" данного файла
   ' проверяет данные в полях "F48" и "F49"
         If Range("F48") <> "" Or Range("F49") <> "" Then
            If Range("F48") <> "Гризатулин В.Д." And Range("F49") = "Коновалова О.В." Then
                MsgBox "HereNot     Griza !!!"
            End If
         End If
         Range("F48").Activate
 '          MsgBox (Range("F48"))
'            Stop

            With Selection
                .HorizontalAlignment = xlLeft
                .VerticalAlignment = xlCenter
            End With
            Range("F48") = "Гризатулин В.Д."
'            Stop
            Range("F49") = "Коновалова О.В."
'            Stop
'          MsgBox Range("F49"), , "Now"
         Range("A1").Activate
         
         
    Debug.Print "_____________________________________"
    Debug.Print "считается          "
         Sheets("Таблица VLAN и IP подсетей").Activate
   ' проверяет данные в полях "F48" и "F49"
         If Range("F48") <> "" Or Range("F49") <> "" Then
            If Range("F48") <> "Гризатулин В.Д." And Range("F49") = "Коновалова О.В." Then
                MsgBox "HereNot     Griza !!!"
                Stop
            End If
         End If
         Range("F48").Select
 '          MsgBox (Range("F48"))
'            Stop
            Range("F48", "F49").Select
            With Selection
                .HorizontalAlignment = xlLeft
                .VerticalAlignment = xlCenter
            End With
            Range("F48") = "Гризатулин В.Д."
'            Stop
            Range("F49") = "Коновалова О.В."
'            Stop
 '         MsgBox Range("F49"), , "Now"
         Range("A1").Activate


         
    Debug.Print "_____________________________________"
    Debug.Print "считается "
         Sheets("Таблица маршрутизации").Activate
   ' проверяет данные в полях "F48" и "F49"
         If Range("F48") <> "" Or Range("F49") <> "" Then
            If Range("F48") <> "Гризатулин В.Д." And Range("F49") = "Коновалова О.В." Then
                MsgBox "HereNot     Griza !!!"
                MsgBox Range("F48"), , "Here is"
                Stop
            End If
         End If
         Range("F48").Activate
'           MsgBox (Range("F48"))
'            Stop
            Range("F48", "F49").Select
            With Selection
                .HorizontalAlignment = xlLeft
                .VerticalAlignment = xlCenter
            End With
            Range("F48") = "Гризатулин В.Д."
'            Stop
            Range("F49") = "Коновалова О.В."
'            Stop
'         MsgBox Range("F49"), , "Now"
         Range("A1").Activate
         
Pass:
         
    Debug.Print "_____________________________________"
    Debug.Print "END          "
         ActiveWorkbook.Save
         ActiveWorkbook.Close
        DoEvents    ' временно передаём управление ОС
    Next
'    sh.Range("a:c").EntireColumn.AutoFit    ' автоподбор ширины столбцов
    [a2].Activate: ActiveWindow.FreezePanes = True ' закрепляем первую строку листа
End Sub


Function FilenamesCollection(ByVal FolderPath As String, Optional ByVal Mask As String = "", _
                             Optional ByVal SearchDeep As Long = 999) As Collection
    ' © EducatedFool  excelvba.ru/code/FilenamesCollection
    ' Получает в качестве параметра путь к папке FolderPath,
    ' маску имени искомых файлов Mask (будут отобраны только файлы с такой маской/расширением)
    ' и глубину поиска SearchDeep в подпапках (если SearchDeep=1, то подпапки не просматриваются).
    ' Возвращает коллекцию, содержащую полные пути найденных файлов
    ' (применяется рекурсивный вызов процедуры GetAllFileNamesUsingFSO)

    Set FilenamesCollection = New Collection    ' создаём пустую коллекцию
    Set FSO = CreateObject("Scripting.FileSystemObject")    ' создаём экземпляр FileSystemObject
    GetAllFileNamesUsingFSO FolderPath, Mask, FSO, FilenamesCollection, SearchDeep ' поиск
    Set FSO = Nothing: Application.StatusBar = False    ' очистка строки состояния Excel
End Function



 
Function GetAllFileNamesUsingFSO(ByVal FolderPath As String, ByVal Mask As String, ByRef FSO, _
                                 ByRef FileNamesColl As Collection, ByVal SearchDeep As Long)
    ' перебирает все файлы и подпапки в папке FolderPath, используя объект FSO
    ' перебор папок осуществляется в том случае, если SearchDeep > 1
    ' добавляет пути найденных файлов в коллекцию FileNamesColl
    On Error Resume Next: Set curfold = FSO.GetFolder(FolderPath)
    If Not curfold Is Nothing Then    ' если удалось получить доступ к папке

        ' раскомментируйте эту строку для вывода пути к просматриваемой
        ' в текущий момент папке в строку состояния Excel
        ' Application.StatusBar = "Поиск в папке: " & FolderPath

        For Each fil In curfold.Files    ' перебираем все файлы в папке FolderPath
            If fil.Name Like "*" & Mask Then FileNamesColl.Add fil.Path
        Next
        SearchDeep = SearchDeep - 1    ' уменьшаем глубину поиска в подпапках
        If SearchDeep Then    ' если надо искать глубже
            For Each sfol In curfold.SubFolders    ' перебираем все подпапки в папке FolderPath
                GetAllFileNamesUsingFSO sfol.Path, Mask, FSO, FileNamesColl, SearchDeep
            Next
        End If
        Set fil = Nothing: Set curfold = Nothing    ' очищаем переменные
    End If
End Function



'_________________________________________________________________________________________________________________________________________

Attribute VB_Name = "Module2"
Sub ПроверкаФайловИзПапки()
        
    Dim folder$, coll As Collection
 
' проверка есть ли такая папка
    folder$ = ThisWorkbook.Path & "\"
    If Dir(folder$, vbDirectory) = "" Then
        MsgBox "Не найдена папка «" & folder$ & "»", vbCritical, "Нет указанной папки"
        Exit Sub        ' выход, если папка не найдена
    End If
 
' при помощи Подпрограммы "FilenamesCollection" получаем список файлов XLS из папки и всех (в "глубину" до 999) подпапок там
    Set coll = FilenamesCollection(folder$, "*IPtabl*.xlsx", 999)       ' получаем список файлов XLS из папки
' проверяет собраны ли данные, и если нет, - сообщает о том, что нет таких файлов
    If coll.Count = 0 Then
        MsgBox "В папке «" & Split(folder$, "\")(UBound(Split(folder$, "\")) - 1) & "» нет ни одного подходящего файла!", _
               vbCritical, "Файлы для обработки не найдены"
        Exit Sub        ' выход, если нет файлов
    End If
 
'    Application.ScreenUpdating = False    ' отключаем обновление экрана

' создаём новую книгу
    Dim sh As Worksheet: Set sh = Workbooks.Add.Worksheets(1)
' формируем заголовки таблицы
    With sh.Range("a1").Resize(, 3)
        .Value = Array("№", "Имя файла", "Полный путь")
        .Font.Bold = True: .Interior.ColorIndex = 17
    End With
 
' выводим результаты на лист; и, если надо, - вносит изменения в файл путь к которому прописан на вносимой строке
    For I = 1 To coll.Count ' перебираем все элементы коллекции, содержащей пути к файлам
    Debug.Print I
    Debug.Print coll(I)
'    Debug.Print Dir(coll(I))
'    Debug.Print coll(I)
    Debug.Print "_____________________________________"
    Debug.Print "   "
    
'    If Dir(coll(I)) = "GI-UVD-S0 IPtables.xlsx" Then
'        GoTo Pass
'    End If
    
        sh.Range("a" & sh.Rows.Count).End(xlUp).Offset(1).Resize(, 3).Value = Array(I, Dir(coll(I)), coll(I))    ' выводим на лист очередную строку
         Workbooks.Open Filename:=coll(I)   ' открывает файл, прописанный в данной строке
         
        
         Sheets("Таблица IP адресов").Activate  ' переходит на страницу "Таблица IP адресов" данного файла
   ' проверяет данные в полях "F48" и "F49"
'         If Range("F48") <> "" Or Range("F49") <> "" Then
            If Range("F48") <> "Гризатулин В.Д." And Range("F49") = "Коновалова О.В." Then
                MsgBox "HereNot     Griza !!!"
            End If
'         End If

         ActiveWorkbook.Close
        DoEvents    ' временно передаём управление ОС
    Next
    sh.Range("a:c").EntireColumn.AutoFit    ' автоподбор ширины столбцов
    [a2].Activate: ActiveWindow.FreezePanes = True ' закрепляем первую строку листа
End Sub


Function FilenamesCollection(ByVal FolderPath As String, Optional ByVal Mask As String = "", _
                             Optional ByVal SearchDeep As Long = 999) As Collection
    ' © EducatedFool  excelvba.ru/code/FilenamesCollection
    ' Получает в качестве параметра путь к папке FolderPath,
    ' маску имени искомых файлов Mask (будут отобраны только файлы с такой маской/расширением)
    ' и глубину поиска SearchDeep в подпапках (если SearchDeep=1, то подпапки не просматриваются).
    ' Возвращает коллекцию, содержащую полные пути найденных файлов
    ' (применяется рекурсивный вызов процедуры GetAllFileNamesUsingFSO)

    Set FilenamesCollection = New Collection    ' создаём пустую коллекцию
    Set FSO = CreateObject("Scripting.FileSystemObject")    ' создаём экземпляр FileSystemObject
    GetAllFileNamesUsingFSO FolderPath, Mask, FSO, FilenamesCollection, SearchDeep ' поиск
    Set FSO = Nothing: Application.StatusBar = False    ' очистка строки состояния Excel
End Function



 
Function GetAllFileNamesUsingFSO(ByVal FolderPath As String, ByVal Mask As String, ByRef FSO, _
                                 ByRef FileNamesColl As Collection, ByVal SearchDeep As Long)
    ' перебирает все файлы и подпапки в папке FolderPath, используя объект FSO
    ' перебор папок осуществляется в том случае, если SearchDeep > 1
    ' добавляет пути найденных файлов в коллекцию FileNamesColl
    On Error Resume Next: Set curfold = FSO.GetFolder(FolderPath)
    If Not curfold Is Nothing Then    ' если удалось получить доступ к папке

        ' раскомментируйте эту строку для вывода пути к просматриваемой
        ' в текущий момент папке в строку состояния Excel
        ' Application.StatusBar = "Поиск в папке: " & FolderPath

        For Each fil In curfold.Files    ' перебираем все файлы в папке FolderPath
            If fil.Name Like "*" & Mask Then FileNamesColl.Add fil.Path
        Next
        SearchDeep = SearchDeep - 1    ' уменьшаем глубину поиска в подпапках
        If SearchDeep Then    ' если надо искать глубже
            For Each sfol In curfold.SubFolders    ' перебираем все подпапки в папке FolderPath
                GetAllFileNamesUsingFSO sfol.Path, Mask, FSO, FileNamesColl, SearchDeep
            Next
        End If
        Set fil = Nothing: Set curfold = Nothing    ' очищаем переменные
    End If
End Function



